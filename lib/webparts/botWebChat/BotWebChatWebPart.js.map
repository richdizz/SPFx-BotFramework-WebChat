{"version":3,"sources":["webparts/botWebChat/BotWebChatWebPart.ts"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,IAAY,QAAQ,WAAM,WAAW,CAAC,CAAA;AACtC,gCAAwB,4BAA4B,CAAC,CAAA;AACrD,gCAIO,4BAA4B,CAAC,CAAA;AAGpC,2BAAuB,yBAAyB,CAAC,CAAA;AAEjD,IAAY,OAAO,WAAM,mBAAmB,CAAC,CAAA;AAC7C,wBAAqC,0BAA0B,CAAC,CAAA;AAEhE,OAAO,CAAC,8BAA8B,CAAC,CAAC;AAExC;IAA+C,qCAA8C;IAA7F;QAA+C,8BAA8C;IA+C7F,CAAC;IA9CQ,kCAAM,GAAb;QAEE,mGAAmG;QACnG,IAAM,OAAO,GAAyC,KAAK,CAAC,aAAa,CACvE,oBAAU,EAAE;YACV,EAAE,EAAE,YAAY;SACjB,CACF,CAAC;QACF,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAE1C,4EAA4E;QAC5E,aAAG,CAAC;YACA,IAAI,EAAE;gBACJ,EAAE,EAAE,oBAAoB;aACzB;YACD,UAAU,EAAE;gBACV,KAAK,EAAE,iEAAiE;aACzE;SACF,EAAE,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC;IAC9C,CAAC;IAED,sBAAc,0CAAW;aAAzB;YACE,MAAM,CAAC,yBAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC;;;OAAA;IAES,wDAA4B,GAAtC;QACE,MAAM,CAAC;YACL,KAAK,EAAE;gBACL;oBACE,MAAM,EAAE;wBACN,WAAW,EAAE,OAAO,CAAC,uBAAuB;qBAC7C;oBACD,MAAM,EAAE;wBACN;4BACE,SAAS,EAAE,OAAO,CAAC,cAAc;4BACjC,WAAW,EAAE;gCACX,uCAAqB,CAAC,aAAa,EAAE;oCACnC,KAAK,EAAE,OAAO,CAAC,qBAAqB;iCACrC,CAAC;6BACH;yBACF;qBACF;iBACF;aACF;SACF,CAAC;IACJ,CAAC;IACH,wBAAC;AAAD,CA/CA,AA+CC,CA/C8C,uCAAqB,GA+CnE;AA/CD;mCA+CC,CAAA","file":"webparts/botWebChat/BotWebChatWebPart.js","sourcesContent":["import * as React from 'react';\r\nimport * as ReactDom from 'react-dom';\r\nimport { Version } from '@microsoft/sp-core-library';\r\nimport {\r\n  BaseClientSideWebPart,\r\n  IPropertyPaneConfiguration,\r\n  PropertyPaneTextField\r\n} from '@microsoft/sp-webpart-base';\r\n\r\n\r\nimport BotWebChat from './components/BotWebChat';\r\nimport { IBotWebChatProps } from './components/IBotWebChatProps';\r\nimport * as strings from 'botWebChatStrings';\r\nimport { ChatProps, Chat, App } from '../../botwebchat/botchat';\r\nimport { IBotWebChatWebPartProps } from './IBotWebChatWebPartProps';\r\nrequire('../../botwebchat/botchat.css');\r\n\r\nexport default class BotWebChatWebPart extends BaseClientSideWebPart<IBotWebChatWebPartProps> {\r\n  public render(): void {\r\n\r\n    // Create wrapper element and give it a random element id that we will use to load web chat control\r\n    const element: React.ReactElement<IBotWebChatProps> = React.createElement(\r\n      BotWebChat, {\r\n        id: \"FooTest123\"\r\n      }\r\n    );\r\n    ReactDom.render(element, this.domElement);\r\n\r\n    // Initialize the BotChat.App with basic config data and the wrapper element\r\n    App({\r\n        user: {\r\n          id: \"TODO_GET_FROM_REST\"\r\n        },\r\n        directLine: {\r\n          token: \"AAos-s9yFEI.cwA.atA.qMoxsYRlWzZPgKBuo5ZfsRpASbo6XsER9i6gBOORIZ8\"\r\n        }\r\n      }, document.getElementById(\"FooTest123\"));\r\n  }\r\n\r\n  protected get dataVersion(): Version {\r\n    return Version.parse('1.0');\r\n  }\r\n\r\n  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {\r\n    return {\r\n      pages: [\r\n        {\r\n          header: {\r\n            description: strings.PropertyPaneDescription\r\n          },\r\n          groups: [\r\n            {\r\n              groupName: strings.BasicGroupName,\r\n              groupFields: [\r\n                PropertyPaneTextField('description', {\r\n                  label: strings.DescriptionFieldLabel\r\n                })\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":"../../../src"}